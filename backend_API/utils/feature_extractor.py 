import tensorflow as tf
import pandas as pd
import numpy as np
import os
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# Etiquetas posibles
estilos = ['casual', 'formal', 'deportivo', 'clasico', 'urbano', 'romantico', 'minimalista', 'vintage']
estaciones = ['verano', 'invierno', 'primavera', 'oto√±o']
ocasiones = ['trabajo', 'cita', 'diario', 'evento formal', 'fiesta']

IMG_SIZE = (224, 224)

def cargar_datos(csv_path, img_folder):
    df = pd.read_csv(csv_path)
    X = []
    y_estilo, y_estacion, y_ocasion = [], [], []

    for _, row in df.iterrows():
        path = os.path.join(img_folder, row['filename'])
        img = img_to_array(load_img(path, target_size=IMG_SIZE)) / 255.0
        X.append(img)
        y_estilo.append(row['estilo'])
        y_estacion.append(row['estacion'])
        y_ocasion.append(row['ocasion'])

    le_estilo = LabelEncoder().fit(estilos)
    le_estacion = LabelEncoder().fit(estaciones)
    le_ocasion = LabelEncoder().fit(ocasiones)

    return (
        np.array(X),
        tf.keras.utils.to_categorical(le_estilo.transform(y_estilo), num_classes=len(estilos)),
        tf.keras.utils.to_categorical(le_estacion.transform(y_estacion), num_classes=len(estaciones)),
        tf.keras.utils.to_categorical(le_ocasion.transform(y_ocasion), num_classes=len(ocasiones))
    )

def build_model():
    base = tf.keras.Sequential([
        tf.keras.layers.Rescaling(1./255, input_shape=(224, 224, 3)),
        tf.keras.layers.Conv2D(32, 3, activation='relu'),
        tf.keras.layers.MaxPooling2D(),
        tf.keras.layers.Conv2D(64, 3, activation='relu'),
        tf.keras.layers.MaxPooling2D(),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu', name='embedding_layer')
    ])

    input_img = tf.keras.Input(shape=(224, 224, 3))
    features = base(input_img)

    output_estilo = tf.keras.layers.Dense(len(estilos), activation='softmax', name='estilo')(features)
    output_estacion = tf.keras.layers.Dense(len(estaciones), activation='softmax', name='estacion')(features)
    output_ocasion = tf.keras.layers.Dense(len(ocasiones), activation='softmax', name='ocasion')(features)

    return tf.keras.Model(inputs=input_img, outputs=[output_estilo, output_estacion, output_ocasion])

def train_model():
    X, y1, y2, y3 = cargar_datos('app/datasets/outfits.csv', 'app/datasets/')

    X_train, X_val, y1_train, y1_val, y2_train, y2_val, y3_train, y3_val = train_test_split(
        X, y1, y2, y3, test_size=0.2, random_state=42
    )

    model = build_model()
    model.compile(
        optimizer='adam',
        loss={'estilo': 'categorical_crossentropy', 'estacion': 'categorical_crossentropy', 'ocasion': 'categorical_crossentropy'},
        metrics=['accuracy']
    )

    model.fit(X_train, {'estilo': y1_train, 'estacion': y2_train, 'ocasion': y3_train},
              validation_data=(X_val, {'estilo': y1_val, 'estacion': y2_val, 'ocasion': y3_val}),
              epochs=10)

    model.save('app/model/multitask_model.h5')
    print("Modelo guardado en app/model/multitask_model.h5")

if __name__ == '__main__':
    train_model()
